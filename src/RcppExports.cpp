// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// readbed
arma::Mat<double> readbed(std::string bedfile, int N, int p, const arma::uvec& myrows, const arma::uvec& mycols, bool verbose);
RcppExport SEXP _mar_readbed(SEXP bedfileSEXP, SEXP NSEXP, SEXP pSEXP, SEXP myrowsSEXP, SEXP mycolsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bedfile(bedfileSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type myrows(myrowsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type mycols(mycolsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(readbed(bedfile, N, p, myrows, mycols, verbose));
    return rcpp_result_gen;
END_RCPP
}
// sfsloopC
arma::vec sfsloopC(const arma::Mat<int>& X);
RcppExport SEXP _mar_sfsloopC(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sfsloopC(X));
    return rcpp_result_gen;
END_RCPP
}
// sfsmatC
arma::vec sfsmatC(const arma::Mat<int>& X);
RcppExport SEXP _mar_sfsmatC(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sfsmatC(X));
    return rcpp_result_gen;
END_RCPP
}
// sfsC
arma::vec sfsC(const arma::Mat<int>& X, const arma::uvec& myrows, const arma::uvec& mycols);
RcppExport SEXP _mar_sfsC(SEXP XSEXP, SEXP myrowsSEXP, SEXP mycolsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type myrows(myrowsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type mycols(mycolsSEXP);
    rcpp_result_gen = Rcpp::wrap(sfsC(X, myrows, mycols));
    return rcpp_result_gen;
END_RCPP
}
// Hn
double Hn(int N);
RcppExport SEXP _mar_Hn(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(Hn(N));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _mar_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _mar_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _mar_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _mar_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mar_readbed", (DL_FUNC) &_mar_readbed, 6},
    {"_mar_sfsloopC", (DL_FUNC) &_mar_sfsloopC, 1},
    {"_mar_sfsmatC", (DL_FUNC) &_mar_sfsmatC, 1},
    {"_mar_sfsC", (DL_FUNC) &_mar_sfsC, 3},
    {"_mar_Hn", (DL_FUNC) &_mar_Hn, 1},
    {"_mar_rcpparma_hello_world", (DL_FUNC) &_mar_rcpparma_hello_world, 0},
    {"_mar_rcpparma_outerproduct", (DL_FUNC) &_mar_rcpparma_outerproduct, 1},
    {"_mar_rcpparma_innerproduct", (DL_FUNC) &_mar_rcpparma_innerproduct, 1},
    {"_mar_rcpparma_bothproducts", (DL_FUNC) &_mar_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_mar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
